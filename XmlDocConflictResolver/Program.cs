using System.CommandLine;
using XmlDocConflictResolver;

class Program
{
    static async Task<int> Main(string[] args)
    {
        var ixmlOption = new Option<DirectoryInfo?>("--isenseDir")
        {
            Required = true,
            Description = "The path to the IntelliSense XML files generated by the compiler."
        };

        var ecmaxmlOption = new Option<DirectoryInfo?>("--ecmaxmlDir")
        {
            Required = true,
            Description = "The path to the ECMAXML files from the docs repo."
        };

        var rootCommand = new RootCommand("IntelliSense XML <-> ECMAXML doc comment resolver app");
        rootCommand.Options.Add(ixmlOption);
        rootCommand.Options.Add(ecmaxmlOption);

        rootCommand.SetAction(parseResult =>
        {
            DirectoryInfo intelliSenseDir = parseResult.GetValue<DirectoryInfo>("--isenseDir");
            DirectoryInfo ecmaxmlDir = parseResult.GetValue<DirectoryInfo>("--ecmaxmlDir");

            MergeAndAnnotate(intelliSenseDir, ecmaxmlDir);
        });

        return rootCommand.Parse(args).Invoke();
    }

    static void MergeAndAnnotate(DirectoryInfo iXmlDir, DirectoryInfo ecmaxmlDir)
    {
        // Load all files
        // For each member in the IntelliSense XML, see if there's non-empty text in ECMAXML.
        // If so, save both versions of the text in the IntelliSense XML object.
        // After the for each loop, write new XML for any namespaces
        // that have members with more than one copy of summary/returns/param etc.

        var checker = new ConflictChecker(iXmlDir, ecmaxmlDir);
        checker.CollectFiles();
        checker.Start();
        checker.SaveToDisk();
        checker.AddConflictMarkers();
        checker.CleanUpFiles();
    }
}
